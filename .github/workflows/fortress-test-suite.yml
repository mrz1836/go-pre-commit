# ------------------------------------------------------------------------------------
#  Test Suite (Reusable Workflow) (GoFortress)
#
#  Purpose: Run the main Go test suite across multiple Go versions and operating
#  systems, including unit tests, race detection, coverage, and fuzz tests.
#
#  Maintainer: @mrz1836
#
# ------------------------------------------------------------------------------------

name: GoFortress (Go Test Suite)

on:
  workflow_call:
    inputs:
      env-json:
        description: "JSON string of environment variables"
        required: true
        type: string
      test-matrix:
        description: "Test matrix JSON"
        required: true
        type: string
      primary-runner:
        description: "Primary runner OS"
        required: true
        type: string
      go-primary-version:
        description: "Primary Go version"
        required: true
        type: string
      go-secondary-version:
        description: "Secondary Go version"
        required: true
        type: string
      code-coverage-enabled:
        description: "Whether code coverage is enabled"
        required: true
        type: string
      coverage-provider:
        description: "Coverage service provider (internal or codecov)"
        required: false
        type: string
        default: "internal"
      race-detection-enabled:
        description: "Whether race detection is enabled"
        required: true
        type: string
      fuzz-testing-enabled:
        description: "Whether fuzz testing is enabled"
        required: true
        type: string
    secrets:
      github-token:
        description: "GitHub token for API access"
        required: true
      CODECOV_TOKEN:
        description: "Codecov token for uploading coverage (required when coverage-provider is codecov)"
        required: false

# Security: Restrictive default permissions with job-level overrides for least privilege access
permissions:
  contents: read

jobs:
  # ----------------------------------------------------------------------------------
  # Testing Matrix for Go (Parallel)
  # ----------------------------------------------------------------------------------
  test-go:
    name: 🧪 Test (${{ matrix.name }})
    timeout-minutes: 30 # Prevent hung tests
    permissions:
      contents: write # Read repository content for testing
    strategy:
      fail-fast: true
      matrix: ${{ fromJSON(inputs.test-matrix) }}
    runs-on: ${{ matrix.os }}

    steps:
      # ————————————————————————————————————————————————————————————————
      # Parse environment variables
      # ————————————————————————————————————————————————————————————————
      - name: 🔧 Parse environment variables
        env:
          ENV_JSON: ${{ inputs.env-json }}
        run: |
          echo "📋 Setting environment variables..."
          echo "$ENV_JSON" | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' | while IFS='=' read -r key value; do
            echo "$key=$value" >> $GITHUB_ENV
          done

      # ————————————————————————————————————————————————————————————————
      # Checkout code and set up Go environment
      # ————————————————————————————————————————————————————————————————
      - name: 📥 Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      # ————————————————————————————————————————————————————————————————
      # Setup Go with caching and version management
      # ————————————————————————————————————————————————————————————————
      - name: 🏗️ Setup Go with Cache
        id: setup-go-test
        uses: ./.github/actions/setup-go-with-cache
        with:
          go-version: ${{ matrix.go-version }}
          matrix-os: ${{ matrix.os }}
          go-primary-version: ${{ inputs.go-primary-version }}
          go-secondary-version: ${{ inputs.go-secondary-version }}

      # ————————————————————————————————————————————————————————————————
      # Setup MAGE-X (required for magex test commands)
      # ————————————————————————————————————————————————————————————————
      - name: 🔧 Setup MAGE-X
        uses: ./.github/actions/setup-magex
        with:
          magex-version: ${{ env.MAGE_X_VERSION }}
          runner-os: ${{ matrix.os }}

      # ————————————————————————————————————————————————————————————————
      # Start test timer
      # ————————————————————————————————————————————————————————————————
      - name: ⏱️ Start test timer
        id: test-timer
        run: |
          echo "test-start=$(date +%s)" >> $GITHUB_OUTPUT

      # ————————————————————————————————————————————————————————————————
      # Run tests and coverage
      # ————————————————————————————————————————————————————————————————
      - name: 🧪 Run tests
        continue-on-error: true
        run: |
          # Safely assign values to shell vars
          RACE="${{ inputs.race-detection-enabled }}"
          COVER="${{ inputs.code-coverage-enabled }}"

          echo "🔍 Race Detection Enabled: $RACE"
          echo "🔍 Code Coverage Enabled: $COVER"

          if [[ "$RACE" == "true" && "$COVER" == "true" ]]; then
            echo "🏁 Running tests with race detection and coverage analysis..."
            magex test:coverrace 2>&1 | tee test-output.log
          elif [[ "$RACE" != "true" && "$COVER" == "true" ]]; then
            echo "🏁 Running tests with coverage analysis..."
            magex test:cover 2>&1 | tee test-output.log
          elif [[ "$RACE" == "true" && "$COVER" != "true" ]]; then
            echo "🏁 Running tests with race detection..."
            magex test:race 2>&1 | tee test-output.log
          else
            echo "🏁 Running tests without coverage or race detection..."
            magex test 2>&1 | tee test-output.log
          fi

          echo "✅ Tests completed successfully"

      # ————————————————————————————————————————————————————————————————
      # Fix coverage file naming (magex generates coverage_0.txt)
      # TODO: Add multi-module coverage support if needed later
      # ————————————————————————————————————————————————————————————————
      - name: 🔄 Normalize coverage file name
        if: inputs.code-coverage-enabled == 'true'
        run: |
          if [ -f coverage_0.txt ]; then
            cp coverage_0.txt coverage.txt
            echo "✅ Renamed coverage_0.txt to coverage.txt"
          elif [ -f coverage.txt ]; then
            echo "✅ Coverage file already exists as coverage.txt"
          else
            echo "⚠️ No coverage file found (coverage_0.txt or coverage.txt)"
          fi

      # ————————————————————————————————————————————————————————————————
      # Test failure analysis and reporting
      # ————————————————————————————————————————————————————————————————
      - name: 🚨 Create Test Failure Summary
        if: failure()
        run: |
          echo "## 🚨 Test Failures - ${{ matrix.name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **OS**: ${{ matrix.os }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Go Version**: ${{ matrix.go-version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Race Detection**: ${{ inputs.race-detection-enabled }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Coverage Enabled**: ${{ inputs.code-coverage-enabled }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f test-output.log ]; then
            FAIL_COUNT=$(grep -c "^FAIL\|--- FAIL" test-output.log || echo "0")
            PANIC_COUNT=$(grep -c "panic:" test-output.log || echo "0")
            echo "- **Failed Tests**: $FAIL_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "- **Panics**: $PANIC_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            if [ "$FAIL_COUNT" -gt 0 ]; then
              echo "### 🔍 Failed Test Summary (First 10)" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              grep -E "^FAIL\|--- FAIL" test-output.log | head -10 >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi

            if [ "$PANIC_COUNT" -gt 0 ]; then
              echo "### 🚨 Panic Summary" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              grep -A 2 -B 1 "panic:" test-output.log | head -20 >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⚠️ Test output log not found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 📋 Annotate Key Test Failures
        if: failure()
        run: |
          if [ -f test-output.log ]; then
            echo "::group::📋 Test Failure Analysis"

            # Count and report overall statistics
            FAIL_COUNT=$(grep -c "^FAIL\|--- FAIL" test-output.log || echo "0")
            PANIC_COUNT=$(grep -c "panic:" test-output.log || echo "0")

            echo "::error title=Test Suite Failed::$FAIL_COUNT tests failed, $PANIC_COUNT panics detected on ${{ matrix.os }} Go ${{ matrix.go-version }}"

            # Annotate first 5 failed tests
            grep -E "^FAIL\|--- FAIL" test-output.log | head -5 | while IFS= read -r line; do
              echo "::error title=Failed Test::$line"
            done

            # Annotate panics
            if [ "$PANIC_COUNT" -gt 0 ]; then
              grep -B 1 "panic:" test-output.log | head -3 | while IFS= read -r line; do
                echo "::error title=Test Panic::$line"
              done
            fi

            echo "::endgroup::"
          fi

      # ————————————————————————————————————————————————————————————————
      # All test results are always captured
      # ————————————————————————————————————————————————————————————————
      - name: 📊 Calculate test statistics
        id: test-summary
        if: always()
        run: |
          TEST_END=$(date +%s)
          TEST_DURATION=$((TEST_END - ${{ steps.test-timer.outputs.test-start }}))
          TEST_COUNT=0
          EXAMPLE_COUNT=0
          BENCHMARK_COUNT=0

          # Count tests if possible
          TEST_COUNT=$(find . -type f -name '*_test.go' \
            -not -path './vendor/*' \
            -not -path './third_party/*' \
            -not -path './testdata/*' \
            -exec grep -hE '^\s*func (\([^)]+\) )?Test[A-Z0-9_]' {} + | wc -l)

          # Count examples if possible
          EXAMPLE_COUNT=$(find . -type f -name '*_test.go' \
            -not -path './vendor/*' \
            -not -path './third_party/*' \
            -exec grep -h '^func Example' {} + | wc -l)

          # Count benchmarks if possible
          BENCHMARK_COUNT=$(find . -type f -name '*_test.go' \
            -not -path './vendor/*' \
            -not -path './third_party/*' \
            -exec grep -h '^func Benchmark' {} + | wc -l)

          STATS_FILE="test-stats-${{ matrix.os }}-${{ matrix.go-version }}.json"

          # Capture the output of "magex metrics:loc" and store the markdown summary
          LOC_OUTPUT_JSON=$(magex metrics:loc | jq -Rsa .)

          cat > "$STATS_FILE" << EOF
          {
            "name": "${{ matrix.name }}",
            "os": "${{ matrix.os }}",
            "go_version": "${{ matrix.go-version }}",
            "duration_seconds": $TEST_DURATION,
            "test_count": $TEST_COUNT,
            "example_count": $EXAMPLE_COUNT,
            "benchmark_count": $BENCHMARK_COUNT,
            "status": "${{ job.status }}",
            "race_enabled": ${{ inputs.race-detection-enabled }},
            "coverage_enabled": ${{ inputs.code-coverage-enabled }},
            "fuzz_run": false,
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "loc_summary": $LOC_OUTPUT_JSON
          }
          EOF

          echo "📊 Test statistics:"
          jq . "$STATS_FILE"

      # ————————————————————————————————————————————————————————————————
      # Upload test statistics
      # ————————————————————————————————————————————————————————————————
      - name: 📤 Upload test statistics
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: test-stats-${{ matrix.os }}-${{ matrix.go-version }}
          path: test-stats-*.json
          retention-days: 1

      # ————————————————————————————————————————————————————————————————
      # Verify coverage file before upload
      # ————————————————————————————————————————————————————————————————
      - name: 🔍 Verify coverage file
        if: inputs.code-coverage-enabled == 'true'
        run: |
          if [ -f coverage.txt ]; then
            echo "✅ Coverage file exists"
            echo "📊 Coverage file size: $(wc -c < coverage.txt) bytes"
            echo "📊 Coverage file lines: $(wc -l < coverage.txt)"
            echo "📊 First line: $(head -1 coverage.txt)"
            echo "📊 Last line: $(tail -1 coverage.txt)"

            # Ensure the coverage file starts with valid coverage data
            FIRST_LINE=$(head -1 coverage.txt)
            if [[ "$FIRST_LINE" == "mode: atomic" ]] || [[ "$FIRST_LINE" == "mode: count" ]] || [[ "$FIRST_LINE" == "mode: set" ]]; then
              echo "✅ Coverage file format looks valid"

              # Additional debugging info
              echo "📋 Sample coverage lines (lines 2-5):"
              sed -n '2,5p' coverage.txt

              # Check for any non-ASCII characters
              if file coverage.txt | grep -q "ASCII text"; then
                echo "✅ File is pure ASCII text"
              else
                echo "⚠️ File may contain non-ASCII characters"
                file coverage.txt
              fi

              # Check file permissions
              echo "📋 File permissions: $(ls -la coverage.txt)"

              # List all coverage files in directory
              echo "📋 All coverage files in current directory:"
              ls -la *.txt *.out 2>/dev/null | grep -E "(coverage|cover)" || echo "No other coverage files found"

            else
              echo "❌ Coverage file may be corrupted. First line should be 'mode: atomic' or 'mode: count' but got: $FIRST_LINE"
              echo "📋 First 10 lines of coverage file:"
              head -10 coverage.txt
              exit 1
            fi
          else
            echo "❌ Coverage file not found!"
            echo "📋 Current directory: $(pwd)"
            echo "📋 Files in current directory:"
            ls -la
            exit 1
          fi

      # ————————————————————————————————————————————————————————————————
      # Upload coverage data for processing
      # ————————————————————————————————————————————————————————————————
      - name: 📤 Upload coverage data
        if: inputs.code-coverage-enabled == 'true' && matrix.os == inputs.primary-runner && matrix.go-version == inputs.go-primary-version
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: coverage-data
          path: coverage.txt
          retention-days: 1

  # ----------------------------------------------------------------------------------
  # Fuzz Tests (Parallel)
  # ----------------------------------------------------------------------------------
  fuzz-tests:
    name: 🎯 Fuzz Tests
    if: inputs.fuzz-testing-enabled == 'true'
    timeout-minutes: 15 # Fuzz tests have shorter timeout
    permissions:
      contents: read # Read repository content for testing
    runs-on: ${{ inputs.primary-runner }}

    steps:
      # ————————————————————————————————————————————————————————————————
      # Parse environment variables
      # ————————————————————————————————————————————————————————————————
      - name: 🔧 Parse environment variables
        env:
          ENV_JSON: ${{ inputs.env-json }}
        run: |
          echo "📋 Setting environment variables..."
          echo "$ENV_JSON" | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' | while IFS='=' read -r key value; do
            echo "$key=$value" >> $GITHUB_ENV
          done

      # ————————————————————————————————————————————————————————————————
      # Checkout code and set up Go environment
      # ————————————————————————————————————————————————————————————————
      - name: 📥 Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      # ————————————————————————————————————————————————————————————————
      # Setup Go with caching and version management (primary version only)
      # ————————————————————————————————————————————————————————————————
      - name: 🏗️ Setup Go with Cache
        id: setup-go-fuzz
        uses: ./.github/actions/setup-go-with-cache
        with:
          go-version: ${{ inputs.go-primary-version }}
          matrix-os: ${{ inputs.primary-runner }}
          go-primary-version: ${{ inputs.go-primary-version }}
          go-secondary-version: ${{ inputs.go-secondary-version }}

      # ————————————————————————————————————————————————————————————————
      # Setup MAGE-X (required for magex test commands)
      # ————————————————————————————————————————————————————————————————
      - name: 🔧 Setup MAGE-X
        uses: ./.github/actions/setup-magex
        with:
          magex-version: ${{ env.MAGE_X_VERSION }}
          runner-os: ${{ inputs.primary-runner }}

      # ————————————————————————————————————————————————————————————————
      # Start fuzz test timer
      # ————————————————————————————————————————————————————————————————
      - name: ⏱️ Start fuzz test timer
        id: fuzz-timer
        run: |
          echo "fuzz-start=$(date +%s)" >> $GITHUB_OUTPUT

      # ————————————————————————————————————————————————————————————————
      # Run fuzz tests
      # ————————————————————————————————————————————————————————————————
      - name: 🎯 Run fuzz tests
        continue-on-error: true
        run: |
          echo "🎯 Running fuzz tests in parallel..."
          magex test:fuzz time=5s 2>&1 | tee fuzz-output.log
          echo "✅ Fuzz tests completed successfully"

      # ————————————————————————————————————————————————————————————————
      # Fuzz test failure analysis and reporting
      # ————————————————————————————————————————————————————————————————
      - name: 🚨 Create Fuzz Test Failure Summary
        if: failure()
        run: |
          echo "## 🚨 Fuzz Test Failures" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **OS**: ${{ inputs.primary-runner }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Go Version**: ${{ inputs.go-primary-version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f fuzz-output.log ]; then
            FAIL_COUNT=$(grep -c "^FAIL\|--- FAIL" fuzz-output.log || echo "0")
            PANIC_COUNT=$(grep -c "panic:" fuzz-output.log || echo "0")
            echo "- **Failed Fuzz Tests**: $FAIL_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "- **Panics**: $PANIC_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            if [ "$FAIL_COUNT" -gt 0 ]; then
              echo "### 🔍 Failed Fuzz Test Summary (First 5)" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              grep -E "^FAIL\|--- FAIL" fuzz-output.log | head -5 >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi

            if [ "$PANIC_COUNT" -gt 0 ]; then
              echo "### 🚨 Fuzz Test Panic Summary" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              grep -A 2 -B 1 "panic:" fuzz-output.log | head -20 >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⚠️ Fuzz test output log not found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 📋 Annotate Key Fuzz Test Failures
        if: failure()
        run: |
          if [ -f fuzz-output.log ]; then
            echo "::group::📋 Fuzz Test Failure Analysis"

            # Count and report overall statistics
            FAIL_COUNT=$(grep -c "^FAIL\|--- FAIL" fuzz-output.log || echo "0")
            PANIC_COUNT=$(grep -c "panic:" fuzz-output.log || echo "0")

            echo "::error title=Fuzz Test Suite Failed::$FAIL_COUNT fuzz tests failed, $PANIC_COUNT panics detected on ${{ inputs.primary-runner }} Go ${{ inputs.go-primary-version }}"

            # Annotate first 3 failed fuzz tests
            grep -E "^FAIL\|--- FAIL" fuzz-output.log | head -3 | while IFS= read -r line; do
              echo "::error title=Failed Fuzz Test::$line"
            done

            # Annotate panics
            if [ "$PANIC_COUNT" -gt 0 ]; then
              grep -B 1 "panic:" fuzz-output.log | head -2 | while IFS= read -r line; do
                echo "::error title=Fuzz Test Panic::$line"
              done
            fi

            echo "::endgroup::"
          fi

      # ————————————————————————————————————————————————————————————————
      # Calculate fuzz test statistics
      # ————————————————————————————————————————————————————————————————
      - name: 📊 Calculate fuzz test statistics
        id: fuzz-summary
        if: always()
        run: |
          FUZZ_END=$(date +%s)
          FUZZ_DURATION=$((FUZZ_END - ${{ steps.fuzz-timer.outputs.fuzz-start }}))
          FUZZ_TEST_COUNT=0

          # Count fuzz tests
          FUZZ_TEST_COUNT=$(find . -type f -name '*_test.go' \
            -not -path './vendor/*' \
            -not -path './third_party/*' \
            -not -path './testdata/*' \
            -exec grep -hE '^\s*func (\([^)]+\) )?Fuzz[A-Z0-9_]' {} + | wc -l)

          FUZZ_STATS_FILE="fuzz-stats-${{ inputs.primary-runner }}-${{ inputs.go-primary-version }}.json"

          cat > "$FUZZ_STATS_FILE" << EOF
          {
            "name": "Fuzz Tests (${{ inputs.primary-runner }})",
            "os": "${{ inputs.primary-runner }}",
            "go_version": "${{ inputs.go-primary-version }}",
            "duration_seconds": $FUZZ_DURATION,
            "fuzz_test_count": $FUZZ_TEST_COUNT,
            "status": "${{ job.status }}",
            "fuzz_enabled": true,
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          }
          EOF

          echo "📊 Fuzz test statistics:"
          jq . "$FUZZ_STATS_FILE"

      # ————————————————————————————————————————————————————————————————
      # Upload fuzz test statistics
      # ————————————————————————————————————————————————————————————————
      - name: 📤 Upload fuzz test statistics
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: fuzz-stats-${{ inputs.primary-runner }}-${{ inputs.go-primary-version }}
          path: fuzz-stats-*.json
          retention-days: 1

  # ----------------------------------------------------------------------------------
  # Process Coverage
  # ----------------------------------------------------------------------------------
  process-coverage:
    name: 📊 Process Coverage
    needs: test-go
    if: inputs.code-coverage-enabled == 'true' && !startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write # Write repository content and push to gh-pages branch for coverage processing
      pull-requests: write # Required: Coverage workflow needs to create PR comments
      pages: write # Required: Coverage workflow needs to deploy to GitHub Pages
      id-token: write # Required: Coverage workflow needs GitHub Pages authentication
      statuses: write # Required: Coverage workflow needs to create commit status checks
    uses: ./.github/workflows/fortress-coverage.yml
    with:
      coverage-file: coverage.txt
      branch-name: ${{ github.head_ref || github.ref_name }}
      commit-sha: ${{ github.sha }}
      env-json: ${{ inputs.env-json }}
      primary-runner: ${{ inputs.primary-runner }}
      event-name: ${{ github.event_name }}
      pr-number: ${{ github.event.pull_request.number }}
    secrets:
      github-token: ${{ secrets.GH_PAT_TOKEN != '' && secrets.GH_PAT_TOKEN || secrets.GITHUB_TOKEN }}
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
