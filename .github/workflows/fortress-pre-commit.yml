# ------------------------------------------------------------------------------------
#  Pre-commit Checks (Reusable Workflow) (GoFortress)
#
#  Purpose: Run GoFortress Pre-commit System for code quality enforcement.
#  This workflow installs and executes the external go-pre-commit tool.
#
#  Maintainer: @mrz1836
#
# ------------------------------------------------------------------------------------

name: GoFortress (Pre-commit Checks)

on:
  workflow_call:
    inputs:
      env-json:
        description: "JSON string of environment variables"
        required: true
        type: string
      primary-runner:
        description: "Primary runner OS"
        required: true
        type: string
      go-primary-version:
        description: "Primary Go version"
        required: true
        type: string
      pre-commit-enabled:
        description: "Whether GoFortress Pre-commit System is enabled"
        required: true
        type: string
    outputs:
      pre-commit-version:
        description: "Version of go-pre-commit used"
        value: ${{ jobs.pre-commit.outputs.pre-commit-version }}
      checks-executed:
        description: "List of checks that were executed"
        value: ${{ jobs.pre-commit.outputs.checks-executed }}
    secrets:
      github-token:
        description: "GitHub token for API access"
        required: true

# Security: Restrictive default permissions with job-level overrides for least privilege access
permissions:
  contents: read

jobs:
  # ----------------------------------------------------------------------------------
  # Pre-commit Checks Execution
  # ----------------------------------------------------------------------------------
  pre-commit:
    name: 🪝 Pre-commit Checks
    if: ${{ inputs.pre-commit-enabled == 'true' }}
    runs-on: ${{ inputs.primary-runner }}
    outputs:
      pre-commit-version: ${{ steps.pre-commit-version.outputs.version }}
      checks-executed: ${{ steps.run-checks.outputs.executed }}
    steps:
      # ————————————————————————————————————————————————————————————————
      # Parse environment variables
      # ————————————————————————————————————————————————————————————————
      - name: 🔧 Parse environment variables
        env:
          ENV_JSON: ${{ inputs.env-json }}
        run: |
          echo "📋 Setting environment variables..."
          echo "$ENV_JSON" | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' | while IFS='=' read -r key value; do
            echo "$key=$value" >> $GITHUB_ENV
          done

      # ————————————————————————————————————————————————————————————————
      # Checkout code
      # ————————————————————————————————————————————————————————————————
      - name: 📥 Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      # ————————————————————————————————————————————————————————————————
      # Setup Go with caching and version management
      # ————————————————————————————————————————————————————————————————
      - name: 🏗️ Setup Go with Cache
        id: setup-go-precommit
        uses: ./.github/actions/setup-go-with-cache
        with:
          go-version: ${{ inputs.go-primary-version }}
          matrix-os: ${{ inputs.primary-runner }}
          go-primary-version: ${{ inputs.go-primary-version }}
          go-secondary-version: ${{ inputs.go-primary-version }}

      # ————————————————————————————————————————————————————————————————
      # Restore (and later save) a compact cache for the go-pre-commit binary
      # Skip cache when using local development version
      # ————————————————————————————————————————————————————————————————
      - name: 💾 Restore go-pre-commit binary cache
        id: go-pre-commit-cache
        if: env.GO_PRE_COMMIT_USE_LOCAL != 'true'
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: |
            ~/.cache/go-pre-commit-bin
          key: ${{ inputs.primary-runner }}-go-pre-commit-${{ env.GO_PRE_COMMIT_VERSION }}

      # ————————————————————————————————————————————————————————————————
      # Restore (and later save) a compact cache for go-pre-commit tools
      # (golangci-lint, gofumpt) to avoid reinstalling on every run
      # ————————————————————————————————————————————————————————————————
      - name: 💾 Restore go-pre-commit tools cache
        id: go-pre-commit-tools-cache
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: |
            ~/.cache/go-pre-commit-tools
          key: ${{ inputs.primary-runner }}-go-pre-commit-tools-golangci-${{ env.GO_PRE_COMMIT_GOLANGCI_LINT_VERSION }}-fumpt-${{ env.GO_PRE_COMMIT_FUMPT_VERSION }}

      - name: 🛠️ Make cached go-pre-commit and tools usable
        if: env.GO_PRE_COMMIT_USE_LOCAL != 'true'
        run: |
          set -euo pipefail
          BIN_DIR="$HOME/.cache/go-pre-commit-bin"
          TOOLS_DIR="$HOME/.cache/go-pre-commit-tools"
          GO_PRE_COMMIT_BIN="$BIN_DIR/go-pre-commit"
          GOPATH_BIN="$(go env GOPATH)/bin"

          # Ensure GOPATH/bin exists
          mkdir -p "$GOPATH_BIN"

          # If we restored go-pre-commit binary cache, copy it to GOPATH/bin
          if [[ -f "$GO_PRE_COMMIT_BIN" ]]; then
            echo "✅ Using cached go-pre-commit binary"
            cp "$GO_PRE_COMMIT_BIN" "$GOPATH_BIN/"
          fi

          # If we restored tools cache, copy them to GOPATH/bin
          if [[ -d "$TOOLS_DIR" ]]; then
            echo "✅ Using cached go-pre-commit tools"
            for tool in golangci-lint gofumpt; do
              if [[ -f "$TOOLS_DIR/$tool" ]]; then
                echo "  • Restoring cached $tool"
                cp "$TOOLS_DIR/$tool" "$GOPATH_BIN/"
                chmod +x "$GOPATH_BIN/$tool"
              fi
            done
          fi

          # Make sure the binary location is on PATH for *all* subsequent steps.
          echo "$GOPATH_BIN" >> "$GITHUB_PATH"

      - name: 🎯 Set go-pre-commit binary path
        run: |
          # Set the binary path for both cache hit and cache miss scenarios
          GO_BIN="$(go env GOPATH)/bin"
          echo "GO_PRE_COMMIT_BINARY=$GO_BIN/go-pre-commit" >> $GITHUB_ENV

      # ————————————————————————————————————————————————————————————————
      # Display pre-commit configuration
      # ————————————————————————————————————————————————————————————————
      - name: 📋 Display pre-commit configuration
        run: |
          echo "🔧 GoFortress Pre-commit Configuration"
          echo "=================================================="
          echo ""
          echo "📊 System Settings:"
          echo "  • System Enabled: ${{ env.ENABLE_GO_PRE_COMMIT }}"
          echo "  • Tool Version: ${{ env.GO_PRE_COMMIT_VERSION }}"
          echo "  • Use Local Build: ${{ env.GO_PRE_COMMIT_USE_LOCAL }}"
          echo "  • Log Level: ${{ env.GO_PRE_COMMIT_LOG_LEVEL }}"
          echo "  • Fail Fast: ${{ env.GO_PRE_COMMIT_FAIL_FAST }}"
          echo "  • Timeout: ${{ env.GO_PRE_COMMIT_TIMEOUT_SECONDS }} seconds"
          echo "  • Parallel Workers: ${{ env.GO_PRE_COMMIT_PARALLEL_WORKERS }}"
          echo "  • All Files Mode: ${{ env.GO_PRE_COMMIT_ALL_FILES }}"
          echo ""
          echo "🔧 Tool Versions:"
          echo "  • Max File Size: ${{ env.GO_PRE_COMMIT_MAX_FILE_SIZE_MB }} MB"
          echo "  • golangci-lint: ${{ env.GO_PRE_COMMIT_GOLANGCI_LINT_VERSION }}"
          echo "  • gofumpt: ${{ env.GO_PRE_COMMIT_FUMPT_VERSION }}"
          echo "  • goimports: ${{ env.GO_PRE_COMMIT_GOIMPORTS_VERSION }}"
          echo ""
          echo "📁 Configuration:"
          echo "  • Exclude Patterns: ${{ env.GO_PRE_COMMIT_EXCLUDE_PATTERNS }}"
          echo "  • Color Output: ${{ env.GO_PRE_COMMIT_COLOR_OUTPUT }}"
          echo ""
          echo "🔧 Individual Checks:"
          echo "  • fumpt: ${{ env.GO_PRE_COMMIT_ENABLE_FUMPT }}"
          echo "  • lint: ${{ env.GO_PRE_COMMIT_ENABLE_LINT }}"
          echo "  • mod-tidy: ${{ env.GO_PRE_COMMIT_ENABLE_MOD_TIDY }}"
          echo "  • whitespace: ${{ env.GO_PRE_COMMIT_ENABLE_WHITESPACE }}"
          echo "  • eof: ${{ env.GO_PRE_COMMIT_ENABLE_EOF }}"
          echo ""
          echo "=================================================="

      # ————————————————————————————————————————————————————————————————
      # Install go-pre-commit tool when cache miss OR using local version
      # ————————————————————————————————————————————————————————————————
      - name: 🔨 Install go-pre-commit tool
        if: steps.go-pre-commit-cache.outputs.cache-hit != 'true' || env.GO_PRE_COMMIT_USE_LOCAL == 'true'
        id: install-pre-commit
        run: |
          # Check if we should use local development version
          if [[ "${{ env.GO_PRE_COMMIT_USE_LOCAL }}" == "true" ]]; then
            echo "📦 Using local development version of go-pre-commit"
            echo "  Building from source at: $GITHUB_WORKSPACE/cmd/go-pre-commit"

            # Build from local source
            cd "$GITHUB_WORKSPACE"
            go build -v -o /tmp/go-pre-commit ./cmd/go-pre-commit
            chmod +x /tmp/go-pre-commit

            # Copy the freshly built binary to cache directory
            mkdir -p ~/.cache/go-pre-commit-bin
            cp /tmp/go-pre-commit ~/.cache/go-pre-commit-bin/

            # Also copy to GOPATH/bin for immediate use
            mkdir -p "$(go env GOPATH)/bin"
            cp /tmp/go-pre-commit "$(go env GOPATH)/bin/go-pre-commit"

            # Store the binary path
            echo "GO_PRE_COMMIT_BINARY=$(go env GOPATH)/bin/go-pre-commit" >> $GITHUB_ENV

            # Show version info
            echo "✅ Local go-pre-commit built and stored in cache"
            VERSION=$("$(go env GOPATH)/bin/go-pre-commit" --version 2>&1 | head -1 || echo "local-dev")
            echo "🏷️ Version: $VERSION"
            echo "install_success=true" >> $GITHUB_OUTPUT
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            # Use production version
            VERSION="${{ env.GO_PRE_COMMIT_VERSION }}"
            echo "⬇️ Cache miss – installing go-pre-commit version: $VERSION"

            # Install using go install
            go install github.com/mrz1836/go-pre-commit/cmd/go-pre-commit@$VERSION

            # Copy the freshly installed binary to cache directory
            mkdir -p ~/.cache/go-pre-commit-bin
            cp "$(go env GOPATH)/bin/go-pre-commit" ~/.cache/go-pre-commit-bin/

            # Store the binary path
            GO_BIN="$(go env GOPATH)/bin"
            echo "GO_PRE_COMMIT_BINARY=$GO_BIN/go-pre-commit" >> $GITHUB_ENV

            # Verify installation
            echo "✅ go-pre-commit installed and stored in cache"
            VERSION_OUTPUT=$("$GO_BIN/go-pre-commit" --version 2>&1 | head -1 || echo "$VERSION")
            echo "🏷️ Version: $VERSION_OUTPUT"
            echo "install_success=true" >> $GITHUB_OUTPUT
            echo "version=$VERSION_OUTPUT" >> $GITHUB_OUTPUT
          fi

      # ————————————————————————————————————————————————————————————————
      # Set install status for cache hit scenario (skip for local builds)
      # ————————————————————————————————————————————————————————————————
      - name: ✅ Set install status (cache hit)
        if: steps.go-pre-commit-cache.outputs.cache-hit == 'true' && env.GO_PRE_COMMIT_USE_LOCAL != 'true'
        id: install-pre-commit-cached
        run: |
          echo "✅ Using cached go-pre-commit binary"
          echo "install_success=true" >> $GITHUB_OUTPUT

          # Get version from cached binary
          if [[ -f "$(go env GOPATH)/bin/go-pre-commit" ]]; then
            VERSION=$("$(go env GOPATH)/bin/go-pre-commit" --version 2>&1 | head -1 || echo "${{ env.GO_PRE_COMMIT_VERSION }}")
            echo "🏷️ Version: $VERSION"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            echo "version=${{ env.GO_PRE_COMMIT_VERSION }}" >> $GITHUB_OUTPUT
          fi

      # ————————————————————————————————————————————————————————————————
      # Set pre-commit version output
      # ————————————————————————————————————————————————————————————————
      - name: 📌 Set pre-commit version
        id: pre-commit-version
        run: |
          # Check both cache hit and cache miss scenarios
          if [ "${{ steps.go-pre-commit-cache.outputs.cache-hit }}" == "true" ]; then
            # Cache hit - use version from cached step
            echo "version=${{ steps.install-pre-commit-cached.outputs.version }}" >> $GITHUB_OUTPUT
          elif [ "${{ steps.install-pre-commit.outputs.install_success }}" == "true" ]; then
            # Cache miss - use version from install step
            echo "version=${{ steps.install-pre-commit.outputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=not-installed" >> $GITHUB_OUTPUT
          fi

      # ————————————————————————————————————————————————————————————————
      # Run pre-commit checks
      # ————————————————————————————————————————————————————————————————
      - name: 🚀 Run pre-commit checks
        if: steps.install-pre-commit.outputs.install_success == 'true' || steps.install-pre-commit-cached.outputs.install_success == 'true'
        id: run-checks
        run: |
          echo "🚀 Running pre-commit checks..."
          echo "================================"

          # Set environment for CI
          export CI=true

          # The external tool will read environment variables from the merged configuration
          # that we've already loaded into the environment

          # Build command based on GO_PRE_COMMIT_ALL_FILES configuration
          if [[ "${{ env.GO_PRE_COMMIT_ALL_FILES }}" == "true" ]]; then
            echo "🔍 Executing checks on all files..."
            CHECKS_OUTPUT=$("${{ env.GO_PRE_COMMIT_BINARY }}" run --all-files 2>&1) || CHECKS_EXIT=$?
          else
            echo "🔍 Executing checks on staged files..."
            CHECKS_OUTPUT=$("${{ env.GO_PRE_COMMIT_BINARY }}" run 2>&1) || CHECKS_EXIT=$?
          fi

          # Strip ANSI color codes and filter out redundant summary lines
          echo "$CHECKS_OUTPUT" | sed 's/\x1b\[[0-9;]*m//g' | grep -v -E '◆\[[0-9]+m.*passed.*file\(s\) in|^All checks passed!'

          # Extract executed checks from output (if format allows)
          EXECUTED_CHECKS=$(echo "$CHECKS_OUTPUT" | grep -E "Running:|Executing:|✓" | sed 's/.*Running: //;s/.*Executing: //;s/.*✓ //' | tr '\n' ',' | sed 's/,$//' || echo "fumpt,lint,mod-tidy,whitespace,eof")
          echo "executed=$EXECUTED_CHECKS" >> $GITHUB_OUTPUT

          if [ "${CHECKS_EXIT:-0}" -ne 0 ]; then
            echo "❌ Pre-commit checks failed with exit code: ${CHECKS_EXIT}"
            exit ${CHECKS_EXIT}
          fi

          echo ""
          echo "✅ All pre-commit checks passed successfully"

      # ————————————————————————————————————————————————————————————————
      # Cache tools that were installed during pre-commit execution
      # This step ensures tools like golangci-lint and gofumpt are cached for future runs
      # ————————————————————————————————————————————————————————————————
      - name: 💾 Cache go-pre-commit tools after installation
        if: steps.go-pre-commit-tools-cache.outputs.cache-hit != 'true' && (steps.install-pre-commit.outputs.install_success == 'true' || steps.install-pre-commit-cached.outputs.install_success == 'true')
        run: |
          echo "💾 Caching go-pre-commit tools..."
          TOOLS_DIR="$HOME/.cache/go-pre-commit-tools"
          GOPATH_BIN="$(go env GOPATH)/bin"

          # Create tools cache directory
          mkdir -p "$TOOLS_DIR"

          # Cache tools that may have been installed by go-pre-commit
          for tool in golangci-lint gofumpt; do
            if [[ -f "$GOPATH_BIN/$tool" ]]; then
              echo "  • Caching $tool"
              cp "$GOPATH_BIN/$tool" "$TOOLS_DIR/"
            else
              echo "  • $tool not found in GOPATH/bin, may not have been installed"
            fi
          done

          echo "✅ Tool caching completed"

      # ————————————————————————————————————————————————————————————————
      # Job Summary
      # ————————————————————————————————————————————————————————————————
      - name: 📊 Job Summary
        if: always()
        run: |
          echo "## 🪝 Pre-commit Checks Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "| 🔍 Pre-commit System Details | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---|---|" >> $GITHUB_STEP_SUMMARY
          echo "| **Tool** | github.com/mrz1836/go-pre-commit |" >> $GITHUB_STEP_SUMMARY
          echo "| **Version** | ${{ steps.pre-commit-version.outputs.version || env.GO_PRE_COMMIT_VERSION }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Binary Cache** | ${{ steps.go-pre-commit-cache.outputs.cache-hit == 'true' && '✅ Cache Hit' || '⬇️ Cache Miss' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Tools Cache** | ${{ steps.go-pre-commit-tools-cache.outputs.cache-hit == 'true' && '✅ Cache Hit' || '⬇️ Cache Miss' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Installation** | ${{ (steps.install-pre-commit.outputs.install_success == 'true' || steps.install-pre-commit-cached.outputs.install_success == 'true') && '✅ Success' || '❌ Failed (using fallback)' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Fail Fast Mode** | ${{ env.GO_PRE_COMMIT_FAIL_FAST == 'true' && '⚡ Enabled' || '📝 Disabled' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Timeout** | ${{ env.GO_PRE_COMMIT_TIMEOUT_SECONDS }} seconds |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.install-pre-commit.outputs.install_success }}" == "true" ] || [ "${{ steps.install-pre-commit-cached.outputs.install_success }}" == "true" ]; then
            echo "### 🔍 Checks Executed" >> $GITHUB_STEP_SUMMARY
            CHECKS="${{ steps.run-checks.outputs.executed || 'fumpt,lint,mod-tidy,whitespace,eof' }}"
            echo "$CHECKS" | tr ',' '\n' | while read check; do
              if [ -n "$check" ]; then
                echo "- ✅ $check" >> $GITHUB_STEP_SUMMARY
              fi
            done
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🎯 **All pre-commit checks passed successfully using external go-pre-commit tool.**" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ⚠️ Fallback Mode" >> $GITHUB_STEP_SUMMARY
            echo "The external go-pre-commit tool could not be installed. Using magex commands as fallback:" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ magex lint" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ magex tidy" >> $GITHUB_STEP_SUMMARY
          fi

      # ————————————————————————————————————————————————————————————————
      # Collect cache statistics
      # ————————————————————————————————————————————————————————————————
      - name: 📊 Collect cache statistics
        id: cache-stats
        if: always()
        run: |
          echo "📊 Collecting cache statistics..."

          # Get cache hit information
          GOMOD_HIT="${{ steps.setup-go-precommit.outputs.module-cache-hit }}"
          GOBUILD_HIT="${{ steps.setup-go-precommit.outputs.build-cache-hit }}"

          # Get cache sizes
          GOMOD_SIZE="0B"
          GOBUILD_SIZE="0B"

          if [ -d "$HOME/go/pkg/mod" ]; then
            GOMOD_SIZE=$(du -sh "$HOME/go/pkg/mod" 2>/dev/null | cut -f1 || echo "0B")
          fi

          if [ -d "$HOME/.cache/go-build" ]; then
            GOBUILD_SIZE=$(du -sh "$HOME/.cache/go-build" 2>/dev/null | cut -f1 || echo "0B")
          fi

          # Create cache statistics JSON
          echo '{' > "cache-stats-pre-commit.json"
          echo '  "os": "${{ inputs.primary-runner }}",' >> "cache-stats-pre-commit.json"
          echo '  "go_version": "${{ inputs.go-primary-version }}",' >> "cache-stats-pre-commit.json"
          echo "  \"gomod_cache_hit\": \"$GOMOD_HIT\"," >> "cache-stats-pre-commit.json"
          echo "  \"gobuild_cache_hit\": \"$GOBUILD_HIT\"," >> "cache-stats-pre-commit.json"
          echo "  \"cache_size_gomod\": \"$GOMOD_SIZE\"," >> "cache-stats-pre-commit.json"
          echo "  \"cache_size_gobuild\": \"$GOBUILD_SIZE\"," >> "cache-stats-pre-commit.json"
          echo '  "workflow": "pre-commit",' >> "cache-stats-pre-commit.json"
          echo "  \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"" >> "cache-stats-pre-commit.json"
          echo '}' >> "cache-stats-pre-commit.json"

          echo "📊 Cache statistics collected"

      # ————————————————————————————————————————————————————————————————
      # Upload cache statistics
      # ————————————————————————————————————————————————————————————————
      - name: 📤 Upload cache statistics
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: cache-stats-pre-commit
          path: cache-stats-pre-commit.json
          retention-days: 1
